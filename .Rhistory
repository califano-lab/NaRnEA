# create tabs
tabsetPanel(
# bulk analysis panel
tabPanel('Bulk Analysis', h1("Bulk RNASeq Analysis")
),
# single-cell panel
tabPanel('SC Analysis', h1("Single Cell RNASeq Analysis"),
sidebarLayout(
# input
sidebarPanel(
width = 2,
# select dataset
selectInput(inputId = "sc_data_set",
label = "Select Data Set",
choices = sc.dataset.names),
# select analysis
conditionalPanel(condition = "sc_data_set == 'Peng'",
selectInput(inputId = "peng_analysis",
label = "Analysis",
choices = sc.analysis.names$Peng)),
actionButton("plot", "Plot")
),
# output
mainPanel(textOutput("testText"))
)
),
# about panel
tabPanel(title = 'About',
br(),
textOutput("aboutText"),
br()
),
# citation panel
tabPanel('Citation and Contact', h1('Citation and Contact Information')
)
)
)
## server functions
server <- function(input, output) {
## waiting function
plotWait <- eventReactive(input$plot, {
x <- 2 + 3
})
## text output
output$testText <- renderText({
plotWait()
input$sc_data_set
})
}
shinyApp(ui, server)
## UI
ui <- fluidPage(
# webpage title
titlePanel('PADACS: Visualization of PDAC Gene Expression and Protein Activity'),
# create tabs
tabsetPanel(
# bulk analysis panel
tabPanel('Bulk Analysis', h1("Bulk RNASeq Analysis")
),
# single-cell panel
tabPanel('SC Analysis', h1("Single Cell RNASeq Analysis"),
sidebarLayout(
# input
sidebarPanel(
width = 2,
# select dataset
selectInput(inputId = "sc_data_set",
label = "Select Data Set",
choices = sc.dataset.names),
# select analysis
conditionalPanel(condition = "input$sc_data_set == 'Peng'",
selectInput(inputId = "peng_analysis",
label = "Analysis",
choices = sc.analysis.names$Peng)),
actionButton("plot", "Plot")
),
# output
mainPanel(textOutput("testText"))
)
),
# about panel
tabPanel(title = 'About',
br(),
textOutput("aboutText"),
br()
),
# citation panel
tabPanel('Citation and Contact', h1('Citation and Contact Information')
)
)
)
## server functions
server <- function(input, output) {
## waiting function
plotWait <- eventReactive(input$plot, {
x <- 2 + 3
})
## text output
output$testText <- renderText({
plotWait()
input$sc_data_set
})
}
shinyApp(ui, server)
## UI
ui <- fluidPage(
# webpage title
titlePanel('PADACS: Visualization of PDAC Gene Expression and Protein Activity'),
# create tabs
tabsetPanel(
# bulk analysis panel
tabPanel('Bulk Analysis', h1("Bulk RNASeq Analysis")
),
# single-cell panel
tabPanel('SC Analysis', h1("Single Cell RNASeq Analysis"),
sidebarLayout(
# input
sidebarPanel(
width = 2,
# select dataset
selectInput(inputId = "sc_data_set",
label = "Select Data Set",
selected = NULL,
choices = sc.dataset.names),
# select analysis
conditionalPanel(condition = "input$sc_data_set == 'Peng'",
selectInput(inputId = "peng_analysis",
label = "Analysis",
selected = NULL,
choices = sc.analysis.names$Peng)),
actionButton("plot", "Plot")
),
# output
mainPanel(textOutput("testText"))
)
),
# about panel
tabPanel(title = 'About',
br(),
textOutput("aboutText"),
br()
),
# citation panel
tabPanel('Citation and Contact', h1('Citation and Contact Information')
)
)
)
## server functions
server <- function(input, output) {
## waiting function
plotWait <- eventReactive(input$plot, {
x <- 2 + 3
})
## text output
output$testText <- renderText({
plotWait()
input$sc_data_set
})
}
shinyApp(ui, server)
## UI
ui <- fluidPage(
# webpage title
titlePanel('PADACS: Visualization of PDAC Gene Expression and Protein Activity'),
# create tabs
tabsetPanel(
# bulk analysis panel
tabPanel('Bulk Analysis', h1("Bulk RNASeq Analysis")
),
# single-cell panel
tabPanel('SC Analysis', h1("Single Cell RNASeq Analysis"),
sidebarLayout(
# input
sidebarPanel(
width = 2,
# select dataset
selectInput(inputId = "sc_data_set",
label = "Select Data Set",
selected = NULL,
choices = sc.dataset.names),
# select analysis
conditionalPanel(condition = "input.sc_data_set == 'Peng'",
selectInput(inputId = "peng_analysis",
label = "Analysis",
selected = NULL,
choices = sc.analysis.names$Peng)),
actionButton("plot", "Plot")
),
# output
mainPanel(textOutput("testText"))
)
),
# about panel
tabPanel(title = 'About',
br(),
textOutput("aboutText"),
br()
),
# citation panel
tabPanel('Citation and Contact', h1('Citation and Contact Information')
)
)
)
## server functions
server <- function(input, output) {
## waiting function
plotWait <- eventReactive(input$plot, {
x <- 2 + 3
})
## text output
output$testText <- renderText({
plotWait()
input$sc_data_set
})
}
shinyApp(ui, server)
## UI
ui <- fluidPage(
# webpage title
titlePanel('PADACS: Visualization of PDAC Gene Expression and Protein Activity'),
# create tabs
tabsetPanel(
# bulk analysis panel
tabPanel('Bulk Analysis', h1("Bulk RNASeq Analysis")
),
# single-cell panel
tabPanel('SC Analysis', h1("Single Cell RNASeq Analysis"),
sidebarLayout(
# input
sidebarPanel(
width = 2,
# select dataset
selectInput(inputId = "sc_data_set",
label = "Select Data Set",
selected = NULL,
choices = sc.dataset.names),
# select compartment
conditionalPanel(condition = "input.sc_data_set == 'Peng'",
selectInput(inputId = "peng_compartment",
label = "Compartment",
selected = NULL,
choices = sc.compartment.names$Peng)),
# select analysis
conditionalPanel(condition = "input.peng_compartment == 'Tumor'",
selectInput(inputId = "peng_tumor_analysis",
label = "Analysis",
selected = NULL,
choices = sc.analysis.names$Peng)),
actionButton("plot", "Plot")
),
# output
mainPanel(textOutput("testText"))
)
),
# about panel
tabPanel(title = 'About',
br(),
textOutput("aboutText"),
br()
),
# citation panel
tabPanel('Citation and Contact', h1('Citation and Contact Information')
)
)
)
## load input choices
sc.dataset.names <- list('Peng', 'Lin', 'Tuveson')
sc.compartment.names <- list('Peng' = list('Tumor', 'Normal'),
'Lin' = list('Tumor', 'Normal'))
sc.analysis.names <- list('Peng' = list('Cluster', 'SingleR', 'Paper Classification', 'Fibroblasts'),
'Lin' = list('Cluster', 'SingleR', 'Paper Classification'))
## UI
ui <- fluidPage(
# webpage title
titlePanel('PADACS: Visualization of PDAC Gene Expression and Protein Activity'),
# create tabs
tabsetPanel(
# bulk analysis panel
tabPanel('Bulk Analysis', h1("Bulk RNASeq Analysis")
),
# single-cell panel
tabPanel('SC Analysis', h1("Single Cell RNASeq Analysis"),
sidebarLayout(
# input
sidebarPanel(
width = 2,
# select dataset
selectInput(inputId = "sc_data_set",
label = "Select Data Set",
selected = NULL,
choices = sc.dataset.names),
# select compartment
conditionalPanel(condition = "input.sc_data_set == 'Peng'",
selectInput(inputId = "peng_compartment",
label = "Compartment",
selected = NULL,
choices = sc.compartment.names$Peng)),
# select analysis
conditionalPanel(condition = "input.peng_compartment == 'Tumor'",
selectInput(inputId = "peng_tumor_analysis",
label = "Analysis",
selected = NULL,
choices = sc.analysis.names$Peng)),
actionButton("plot", "Plot")
),
# output
mainPanel(textOutput("testText"))
)
),
# about panel
tabPanel(title = 'About',
br(),
textOutput("aboutText"),
br()
),
# citation panel
tabPanel('Citation and Contact', h1('Citation and Contact Information')
)
)
)
shinyApp(ui, server)
## server functions
server <- function(input, output) {
## waiting function
plotWait <- eventReactive(input$plot, {
x <- 2 + 3
})
## text output
output$testText <- renderText({
plotWait()
paste(input$sc_data_set, input$peng_compartment)
})
}
shinyApp(ui, server)
## UI
ui <- fluidPage(
# webpage title
titlePanel('PADACS: Visualization of PDAC Gene Expression and Protein Activity'),
# create tabs
tabsetPanel(
# bulk analysis panel
tabPanel('Bulk Analysis', h1("Bulk RNASeq Analysis")
),
# single-cell panel
tabPanel('SC Analysis', h1("Single Cell RNASeq Analysis"),
sidebarLayout(
# input
sidebarPanel(
width = 2,
# select dataset
selectInput(inputId = "sc_data_set",
label = "Select Data Set",
selected = NULL,
choices = sc.dataset.names),
# select compartment
conditionalPanel(condition = "input.sc_data_set == 'Peng'",
selectInput(inputId = "peng_compartment",
label = "Compartment",
selected = NULL,
choices = sc.compartment.names$Peng)),
# select analysis
conditionalPanel(condition = "input.peng_compartment == 'Tumor' && input.sc_data_st = 'Peng'",
selectInput(inputId = "peng_tumor_analysis",
label = "Analysis",
selected = NULL,
choices = sc.analysis.names$Peng)),
actionButton("plot", "Plot")
),
# output
mainPanel(textOutput("testText"))
)
),
# about panel
tabPanel(title = 'About',
br(),
textOutput("aboutText"),
br()
),
# citation panel
tabPanel('Citation and Contact', h1('Citation and Contact Information')
)
)
)
shinyApp(ui, server)
## UI
ui <- fluidPage(
# webpage title
titlePanel('PADACS: Visualization of PDAC Gene Expression and Protein Activity'),
# create tabs
tabsetPanel(
# bulk analysis panel
tabPanel('Bulk Analysis', h1("Bulk RNASeq Analysis")
),
# single-cell panel
tabPanel('SC Analysis', h1("Single Cell RNASeq Analysis"),
sidebarLayout(
# input
sidebarPanel(
width = 2,
# select dataset
selectInput(inputId = "sc_data_set",
label = "Select Data Set",
selected = NULL,
choices = sc.dataset.names),
# select compartment
conditionalPanel(condition = "input.sc_data_set == 'Peng'",
selectInput(inputId = "peng_compartment",
label = "Compartment",
selected = NULL,
choices = sc.compartment.names$Peng)),
actionButton("plot", "Plot")
),
# output
mainPanel(textOutput("testText"))
)
),
# about panel
tabPanel(title = 'About',
br(),
textOutput("aboutText"),
br()
),
# citation panel
tabPanel('Citation and Contact', h1('Citation and Contact Information')
)
)
)
## server functions
server <- function(input, output) {
## waiting function
plotWait <- eventReactive(input$plot, {
x <- 2 + 3
})
## text output
output$testText <- renderText({
plotWait()
paste(input$sc_data_set, input$peng_compartment)
})
}
shinyApp(ui, server)
## UI
ui <- fluidPage(
# webpage title
titlePanel('PADACS: Visualization of PDAC Gene Expression and Protein Activity'),
# create tabs
tabsetPanel(
# bulk analysis panel
tabPanel('Bulk Analysis', h1("Bulk RNASeq Analysis")
),
# single-cell panel
tabPanel('SC Analysis', h1("Single Cell RNASeq Analysis"),
sidebarLayout(
# input
sidebarPanel(
width = 2,
# select dataset
selectInput(inputId = "sc_data_set",
label = "Select Data Set",
selected = NULL,
choices = sc.dataset.names),
# select analysis
conditionalPanel(condition = "input.peng_compartment == 'Tumor' && input.sc_data_st = 'Peng'",
selectInput(inputId = "peng_tumor_analysis",
label = "Analysis",
selected = NULL,
choices = sc.analysis.names$Peng)),
actionButton("plot", "Plot")
),
# output
mainPanel(textOutput("testText"))
)
),
# about panel
tabPanel(title = 'About',
br(),
textOutput("aboutText"),
br()
),
# citation panel
tabPanel('Citation and Contact', h1('Citation and Contact Information')
)
)
)
shinyApp(ui, server)
tabel(peng.tumor$Cluster)
table(peng.tumor$Cluster)
table(peng.tumor$SingleR)
peng.rnaseq <- readRDS('C://Users/lvlah/linux/ac_lab/pdac_data/peng/Peng_Dataset/Tumor_Samples/Peng_Tumor_UMI_Counts_SparseMatrix.rds')
dim(peng.rnaseq)
peng.rnaseq[1:5,1:5]
head(peng.rnaseq['KRAS',])
plot.df <- data.frame('KRAS' = peng.rnaseq['KRAS',])
ggplot(plot.df, aes(x = KRAS)) + geom_density()
setwd('C://Users/lvlah/linux/ac_lab/NaRnEA/')
devtools::install()
vignette('NaRnEA')
vignette(package = 'NaRnEA')
devtools::install(build_vignettes = TRUE)
library(NaRnEA)
vignette(package = NaRnEA)
vignette(package = 'NaRnEA')
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::install(build_vignettes = TRUE)
library(NaRnEA)
vignette(package = 'NaRnEA')
vignette(NaRnEA_COAD)
vignette('NaRnEA_COAD')
