ui <- fluidPage(
# webpage title
titlePanel('PADACS: Visualization of PDAC Gene Expression and Protein Activity'),
# create tabs
tabsetPanel(
# bulk analysis panel
tabPanel('Bulk Analysis', h1("Bulk RNASeq Analysis")
),
# single-cell panel
tabPanel('SC Analysis', h1("Single Cell RNASeq Analysis"),
sidebarLayout(
# input
sidebarPanel(
width = 2,
# select dataset
selectInput(inputId = "sc_data_set",
label = "Select Data Set",
choices = sc.dataset.names),
# select analysis
conditionalPanel(condition = "input$sc_data_set == 'Peng'",
selectInput(inputId = "peng_analysis",
label = "Analysis",
choices = sc.analysis.names$Peng)),
actionButton("plot", "Plot")
),
# output
mainPanel(textOutput("testText"))
)
),
# about panel
tabPanel(title = 'About',
br(),
textOutput("aboutText"),
br()
),
# citation panel
tabPanel('Citation and Contact', h1('Citation and Contact Information')
)
)
)
## server functions
server <- function(input, output) {
## waiting function
plotWait <- eventReactive(input$plot, {
x <- 2 + 3
})
## text output
output$testText <- renderText({
plotWait()
input$sc_data_set
})
}
shinyApp(ui, server)
## UI
ui <- fluidPage(
# webpage title
titlePanel('PADACS: Visualization of PDAC Gene Expression and Protein Activity'),
# create tabs
tabsetPanel(
# bulk analysis panel
tabPanel('Bulk Analysis', h1("Bulk RNASeq Analysis")
),
# single-cell panel
tabPanel('SC Analysis', h1("Single Cell RNASeq Analysis"),
sidebarLayout(
# input
sidebarPanel(
width = 2,
# select dataset
selectInput(inputId = "sc_data_set",
label = "Select Data Set",
selected = NULL,
choices = sc.dataset.names),
# select analysis
conditionalPanel(condition = "input$sc_data_set == 'Peng'",
selectInput(inputId = "peng_analysis",
label = "Analysis",
selected = NULL,
choices = sc.analysis.names$Peng)),
actionButton("plot", "Plot")
),
# output
mainPanel(textOutput("testText"))
)
),
# about panel
tabPanel(title = 'About',
br(),
textOutput("aboutText"),
br()
),
# citation panel
tabPanel('Citation and Contact', h1('Citation and Contact Information')
)
)
)
## server functions
server <- function(input, output) {
## waiting function
plotWait <- eventReactive(input$plot, {
x <- 2 + 3
})
## text output
output$testText <- renderText({
plotWait()
input$sc_data_set
})
}
shinyApp(ui, server)
## UI
ui <- fluidPage(
# webpage title
titlePanel('PADACS: Visualization of PDAC Gene Expression and Protein Activity'),
# create tabs
tabsetPanel(
# bulk analysis panel
tabPanel('Bulk Analysis', h1("Bulk RNASeq Analysis")
),
# single-cell panel
tabPanel('SC Analysis', h1("Single Cell RNASeq Analysis"),
sidebarLayout(
# input
sidebarPanel(
width = 2,
# select dataset
selectInput(inputId = "sc_data_set",
label = "Select Data Set",
selected = NULL,
choices = sc.dataset.names),
# select analysis
conditionalPanel(condition = "input.sc_data_set == 'Peng'",
selectInput(inputId = "peng_analysis",
label = "Analysis",
selected = NULL,
choices = sc.analysis.names$Peng)),
actionButton("plot", "Plot")
),
# output
mainPanel(textOutput("testText"))
)
),
# about panel
tabPanel(title = 'About',
br(),
textOutput("aboutText"),
br()
),
# citation panel
tabPanel('Citation and Contact', h1('Citation and Contact Information')
)
)
)
## server functions
server <- function(input, output) {
## waiting function
plotWait <- eventReactive(input$plot, {
x <- 2 + 3
})
## text output
output$testText <- renderText({
plotWait()
input$sc_data_set
})
}
shinyApp(ui, server)
## UI
ui <- fluidPage(
# webpage title
titlePanel('PADACS: Visualization of PDAC Gene Expression and Protein Activity'),
# create tabs
tabsetPanel(
# bulk analysis panel
tabPanel('Bulk Analysis', h1("Bulk RNASeq Analysis")
),
# single-cell panel
tabPanel('SC Analysis', h1("Single Cell RNASeq Analysis"),
sidebarLayout(
# input
sidebarPanel(
width = 2,
# select dataset
selectInput(inputId = "sc_data_set",
label = "Select Data Set",
selected = NULL,
choices = sc.dataset.names),
# select compartment
conditionalPanel(condition = "input.sc_data_set == 'Peng'",
selectInput(inputId = "peng_compartment",
label = "Compartment",
selected = NULL,
choices = sc.compartment.names$Peng)),
# select analysis
conditionalPanel(condition = "input.peng_compartment == 'Tumor'",
selectInput(inputId = "peng_tumor_analysis",
label = "Analysis",
selected = NULL,
choices = sc.analysis.names$Peng)),
actionButton("plot", "Plot")
),
# output
mainPanel(textOutput("testText"))
)
),
# about panel
tabPanel(title = 'About',
br(),
textOutput("aboutText"),
br()
),
# citation panel
tabPanel('Citation and Contact', h1('Citation and Contact Information')
)
)
)
## load input choices
sc.dataset.names <- list('Peng', 'Lin', 'Tuveson')
sc.compartment.names <- list('Peng' = list('Tumor', 'Normal'),
'Lin' = list('Tumor', 'Normal'))
sc.analysis.names <- list('Peng' = list('Cluster', 'SingleR', 'Paper Classification', 'Fibroblasts'),
'Lin' = list('Cluster', 'SingleR', 'Paper Classification'))
## UI
ui <- fluidPage(
# webpage title
titlePanel('PADACS: Visualization of PDAC Gene Expression and Protein Activity'),
# create tabs
tabsetPanel(
# bulk analysis panel
tabPanel('Bulk Analysis', h1("Bulk RNASeq Analysis")
),
# single-cell panel
tabPanel('SC Analysis', h1("Single Cell RNASeq Analysis"),
sidebarLayout(
# input
sidebarPanel(
width = 2,
# select dataset
selectInput(inputId = "sc_data_set",
label = "Select Data Set",
selected = NULL,
choices = sc.dataset.names),
# select compartment
conditionalPanel(condition = "input.sc_data_set == 'Peng'",
selectInput(inputId = "peng_compartment",
label = "Compartment",
selected = NULL,
choices = sc.compartment.names$Peng)),
# select analysis
conditionalPanel(condition = "input.peng_compartment == 'Tumor'",
selectInput(inputId = "peng_tumor_analysis",
label = "Analysis",
selected = NULL,
choices = sc.analysis.names$Peng)),
actionButton("plot", "Plot")
),
# output
mainPanel(textOutput("testText"))
)
),
# about panel
tabPanel(title = 'About',
br(),
textOutput("aboutText"),
br()
),
# citation panel
tabPanel('Citation and Contact', h1('Citation and Contact Information')
)
)
)
shinyApp(ui, server)
## server functions
server <- function(input, output) {
## waiting function
plotWait <- eventReactive(input$plot, {
x <- 2 + 3
})
## text output
output$testText <- renderText({
plotWait()
paste(input$sc_data_set, input$peng_compartment)
})
}
shinyApp(ui, server)
## UI
ui <- fluidPage(
# webpage title
titlePanel('PADACS: Visualization of PDAC Gene Expression and Protein Activity'),
# create tabs
tabsetPanel(
# bulk analysis panel
tabPanel('Bulk Analysis', h1("Bulk RNASeq Analysis")
),
# single-cell panel
tabPanel('SC Analysis', h1("Single Cell RNASeq Analysis"),
sidebarLayout(
# input
sidebarPanel(
width = 2,
# select dataset
selectInput(inputId = "sc_data_set",
label = "Select Data Set",
selected = NULL,
choices = sc.dataset.names),
# select compartment
conditionalPanel(condition = "input.sc_data_set == 'Peng'",
selectInput(inputId = "peng_compartment",
label = "Compartment",
selected = NULL,
choices = sc.compartment.names$Peng)),
# select analysis
conditionalPanel(condition = "input.peng_compartment == 'Tumor' && input.sc_data_st = 'Peng'",
selectInput(inputId = "peng_tumor_analysis",
label = "Analysis",
selected = NULL,
choices = sc.analysis.names$Peng)),
actionButton("plot", "Plot")
),
# output
mainPanel(textOutput("testText"))
)
),
# about panel
tabPanel(title = 'About',
br(),
textOutput("aboutText"),
br()
),
# citation panel
tabPanel('Citation and Contact', h1('Citation and Contact Information')
)
)
)
shinyApp(ui, server)
## UI
ui <- fluidPage(
# webpage title
titlePanel('PADACS: Visualization of PDAC Gene Expression and Protein Activity'),
# create tabs
tabsetPanel(
# bulk analysis panel
tabPanel('Bulk Analysis', h1("Bulk RNASeq Analysis")
),
# single-cell panel
tabPanel('SC Analysis', h1("Single Cell RNASeq Analysis"),
sidebarLayout(
# input
sidebarPanel(
width = 2,
# select dataset
selectInput(inputId = "sc_data_set",
label = "Select Data Set",
selected = NULL,
choices = sc.dataset.names),
# select compartment
conditionalPanel(condition = "input.sc_data_set == 'Peng'",
selectInput(inputId = "peng_compartment",
label = "Compartment",
selected = NULL,
choices = sc.compartment.names$Peng)),
actionButton("plot", "Plot")
),
# output
mainPanel(textOutput("testText"))
)
),
# about panel
tabPanel(title = 'About',
br(),
textOutput("aboutText"),
br()
),
# citation panel
tabPanel('Citation and Contact', h1('Citation and Contact Information')
)
)
)
## server functions
server <- function(input, output) {
## waiting function
plotWait <- eventReactive(input$plot, {
x <- 2 + 3
})
## text output
output$testText <- renderText({
plotWait()
paste(input$sc_data_set, input$peng_compartment)
})
}
shinyApp(ui, server)
## UI
ui <- fluidPage(
# webpage title
titlePanel('PADACS: Visualization of PDAC Gene Expression and Protein Activity'),
# create tabs
tabsetPanel(
# bulk analysis panel
tabPanel('Bulk Analysis', h1("Bulk RNASeq Analysis")
),
# single-cell panel
tabPanel('SC Analysis', h1("Single Cell RNASeq Analysis"),
sidebarLayout(
# input
sidebarPanel(
width = 2,
# select dataset
selectInput(inputId = "sc_data_set",
label = "Select Data Set",
selected = NULL,
choices = sc.dataset.names),
# select analysis
conditionalPanel(condition = "input.peng_compartment == 'Tumor' && input.sc_data_st = 'Peng'",
selectInput(inputId = "peng_tumor_analysis",
label = "Analysis",
selected = NULL,
choices = sc.analysis.names$Peng)),
actionButton("plot", "Plot")
),
# output
mainPanel(textOutput("testText"))
)
),
# about panel
tabPanel(title = 'About',
br(),
textOutput("aboutText"),
br()
),
# citation panel
tabPanel('Citation and Contact', h1('Citation and Contact Information')
)
)
)
shinyApp(ui, server)
tabel(peng.tumor$Cluster)
table(peng.tumor$Cluster)
table(peng.tumor$SingleR)
peng.rnaseq <- readRDS('C://Users/lvlah/linux/ac_lab/pdac_data/peng/Peng_Dataset/Tumor_Samples/Peng_Tumor_UMI_Counts_SparseMatrix.rds')
dim(peng.rnaseq)
peng.rnaseq[1:5,1:5]
head(peng.rnaseq['KRAS',])
plot.df <- data.frame('KRAS' = peng.rnaseq['KRAS',])
ggplot(plot.df, aes(x = KRAS)) + geom_density()
?viper
??viper
library(viper)
BiocManager::install("viper")
BiocManager::install("viper", force = TRUE)
library(viper)
install.packages('splines')
BiocManager::install("viper")
library(viper)
?list.files
setwd('C://Users/Lukas Vlahos/OneDrive/ac_lab/NaRnEA/')
devtools::document()
devtools::document()
load('data/CPTAC_COAD')
load('data/CPTAC_COAD.Rdata')
CPTAC_COAD <- CPTAC.COAd
CPTAC_COAD <- CPTAC.COAD
save(CPTAC_COAD, 'data/CPTAC_COAD.Rdata')
save(CPTAC_COAD, file = 'data/CPTAC_COAD.Rdata')
devtools::document()
load('data/CPTAC_HNSC.Rdata')
CPTAC_HNSC <- CPTAC.HNSC
save(CPTAC_HNSC, file = 'data/CPTAC_HNSC.Rdata')
load('data/CPTAC_LUAD.Rdata')
CPTAC_LUAD <- CPTAC.LUAD
save(CPTAC_LUAD, file = 'data/CPTAC_LUAD.Rdata')
load('data/TCGA_LUAD.Rdata')
TCGA_LUAD <- cur.tcga.entrez.counts.mat
save(TCGA_LUAD, file = 'data/TCGA_LUAD.Rdata')
load('data/TCGA_COAD.Rdata')
TCGA_COAD <- cur.tcga.entrez.counts.mat
save(TCGA_COAD, file = 'data/TCGA_COAD.Rdata')
load('data/TCGA_HNSC.Rdata')
dim(cur.tcga.entrez.counts.mat)
TCGA_HNSC <- cur.tcga.entrez.counts.mat
save(TCGA_HNSC, file = 'data/TCGA_HNSC.Rdata')
devtools::document()
load('data/gene_name_map.Rdata')
devtools::document()
data(CPTAC_COAD)
cur.cptac.tumor.protein.data <- CPTAC_COAD$tumor
cur.cptac.tissue.protein.data <- CPTAC_COAD$tissue
cur.cptac.tumor.vs.tissue.mwu.res <- t(sapply(rownames(cur.cptac.tissue.protein.data), function(sub.gene, cur.test.data, cur.ref.data){
sub.combo.values <- rank(x = as.numeric(c(unlist(cur.test.data[match(sub.gene,rownames(cur.test.data)),]), unlist(cur.ref.data[match(sub.gene,rownames(cur.ref.data)),]))), ties.method = "random")
sub.wilcox.res <- wilcox.test(x = sub.combo.values[seq(from = 1, to = ncol(cur.test.data), by = 1)], y = sub.combo.values[seq(from = (ncol(cur.test.data) + 1), to = (ncol(cur.test.data) + ncol(cur.ref.data)), by = 1)], alternative = "two.sided", paired = FALSE)
sub.p.value <- sub.wilcox.res$p.value
sub.rbc.value <- 2*as.numeric(sub.wilcox.res$statistic)/(ncol(cur.test.data)*ncol(cur.ref.data)) - 1
sub.res.vec <- c("p.values" = sub.p.value, "rbc.values" = sub.rbc.value)
return(sub.res.vec)
}, cur.test.data = cur.cptac.tumor.protein.data, cur.ref.data = cur.cptac.tissue.protein.data))
cur.cptac.tumor.vs.tissue.mwu.res <- as.data.frame(cur.cptac.tumor.vs.tissue.mwu.res)
cur.cptac.tumor.vs.tissue.mwu.res$gene.values <- rownames(cur.cptac.tumor.vs.tissue.mwu.res)
old.entrez.names <- paste("g", sub.cptac.conversion.data[match(cur.cptac.tumor.vs.tissue.mwu.res$gene.values, as.character(sub.cptac.conversion.data$external_gene_name)),"entrezgene_id"], "", sep = "_")
sub.cptac.conversion.data <- getBM(attributes = c("external_gene_name", "entrezgene_id"), mart = cur.mart, values = rownames(cur.cptac.tissue.protein.data))
library(biomaRt)
sub.cptac.conversion.data <- getBM(attributes = c("external_gene_name", "entrezgene_id"), mart = cur.mart, values = rownames(cur.cptac.tissue.protein.data))
colnames(gene.name.map)
# convert CPTAC gene names to entrez values
entrez.gene.names <- gene.name.map[match(cur.cptac.tumor.vs.tissue.mwu.res$gene.values, gene.name.map$hugo.values),
'entrez.values']
head(entrez.gene.names)
# convert CPTAC gene names to entrez values
entrez.gene.names <- gene.name.map[match(cur.cptac.tumor.vs.tissue.mwu.res$gene.values, gene.name.map$hugo.values),
'entrez.values']
cur.cptac.tumor.vs.tissue.mwu.res$entrez.values <- entrez.gene.names
head(cur.cptac.tumor.vs.tissue.mwu.res)
devtools::document()
usethis::use_version()
usethis::use_version()
devtools::document()
